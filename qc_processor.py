import cv2
import numpy as np


class GrabCutProcessor:
    def __init__(self):
        self.bg_model = np.zeros((1, 65), dtype="float")
        self.fg_model = np.zeros((1, 65), dtype="float")
        self.mask = None
        self.inited_with_rect = False
        # self.images = None

    def gc_process(self, image, support_mask):
        if not self.inited_with_rect:
            return None, None

        # green == 255 -> Foreground
        # red == 128 -> Background
        self.mask[support_mask == 255] = cv2.GC_FGD
        self.mask[support_mask == 128] = cv2.GC_BGD
        # plt.imshow(self.mask)
        # plt.show()

        # allocate memory for two arrays that the GrabCut algorithm internally
        # uses when segmenting the foreground from the background
        self.mask, bg_model, fg_model = cv2.grabCut(
            image, self.mask, None, self.bg_model, self.fg_model, 50, mode=cv2.GC_INIT_WITH_MASK)
        # set all definite background and probable background pixels to 0
        # while definite foreground and probable foreground pixels are set
        # to 1, then scale the mask from the range [0, 1] to [0, 255]
        output_mask = np.where((self.mask == 2) | (self.mask == 0), 0, 1)
        output_mask = (output_mask * 255).astype("uint8")
        # apply a bitwise AND to the images using our mask generated by
        # GrabCut to generate our final output images
        output = cv2.bitwise_and(image, image, mask=output_mask)
        return output, output_mask

    def gc_process_rect(self, image, rect):
        if self.inited_with_rect:
            return None, None

        # Rect in x, y, w, h
        self.mask = np.zeros(image.shape[:2], np.uint8)

        # rect = (46, 70, 352 - 46, 390 - 70)
        cv2.grabCut(image, self.mask, rect, self.bg_model, self.fg_model, 15, mode=cv2.GC_INIT_WITH_RECT)

        output_mask = np.where((self.mask == 2) | (self.mask == 0), 0, 1)
        output_mask = (output_mask * 255).astype("uint8")
        # apply a bitwise AND to the images using our mask generated by
        # GrabCut to generate our final output images
        output = cv2.bitwise_and(image, image, mask=output_mask)

        self.inited_with_rect = True

        return output, output_mask
